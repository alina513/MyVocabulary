{"version":3,"file":"static/js/763.79cd2f07.chunk.js","mappings":"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","sources":["components/Dashboard/Filters.styled.jsx","components/Dashboard/Filters.jsx","components/Dashboard/Statistics.styled.jsx","components/Dashboard/Statistics.jsx","components/Dashboard/AddWord.styled.jsx","components/Dashboard/AddWord.jsx","components/Dashboard/Dashboard.styled.jsx","components/Dashboard/Dashboard.jsx","components/DictionaryTable/DictionaryTable.styled.jsx","components/Progress.jsx","components/Pagination/Pagination.styled.jsx","components/Pagination/Pagination.jsx","components/Modal/EditwordModal.styled.jsx","components/Modal/EditWordForm.styled.jsx","components/Modal/EditWordForm.jsx","components/Modal/EditWordModal.jsx","components/Loader.jsx","components/DictionaryTable/DictionaryTable.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Input = styled.input`\n  box-sizing: border-box;\n  border: 1px solid rgba(18, 20, 23, 0.1);\n  border-radius: 15px;\n  padding: 12px 24px;\n  width: 274px;\n  height: 48px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 150%;\n  display: block;\n  color: ${p => p.theme.colors.black};\n  background-color: transparent;\n`;\n\nexport const Select = styled.select`\n  border: 1px solid rgba(18, 20, 23, 0.1);\n  border-radius: 15px;\n  padding: 12px 24px;\n  width: 164px;\n  height: 48px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 150%;\n  color: ${p => p.theme.colors.black};\n  margin-left: 8px;\n  display: block;\n  background-color: transparent;\n`;\nexport const Container = styled.div`\n  margin-bottom: 40px;\n  @media screen and (min-width: 768px) {\n    display: flex;\n    margin-bottom: 28px;\n  }\n  @media screen and (min-width: 1440px) {\n    margin-bottom: 0px;\n  }\n`;\n\nexport const Radio = styled.input`\n  display: flex;\n`;\nexport const RadioContainer = styled.div`\n  box-sizing: border-box;\n  height: 48px;\n  padding: 12px 0px;\n  display: flex;\n  gap: 16px;\n  gap: 16px;\n  margin-bottom: 22px;\n  margin-top: 8px;\n  margin-left: 8px;\n`;\nexport const Label = styled.label`\n  font-weight: 400;\n  font-size: 16px;\n  text-align: center;\n  color: ${p => p.theme.colors.black};\n`;\n","import {\n  Input,\n  Select,\n  Container,\n  Radio,\n  RadioContainer,\n  Label,\n} from './Filters.styled';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { selectToken } from '../../redux/auth/selectors';\nimport { selectCategories } from '../../redux/words/selectors';\nimport { fetchCategories } from '../../redux/words/operation';\nimport { setFilter, setCategory } from '../../redux/words/slice';\nimport { useEffect, useState, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\n\nexport const Filters = () => {\n  const token = useSelector(selectToken);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCategories({ token }));\n  }, [dispatch, token]);\n\n  const categories = useSelector(selectCategories);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [keyword, setKeyword] = useState('');\n\n  const debouncedSetFilter = useMemo(\n    () => debounce(keyword => dispatch(setFilter(keyword)), 300),\n    [dispatch]\n  );\n\n  const handleKeywordChange = event => {\n    const keyword = event.target.value.trim();\n    setKeyword(keyword);\n    debouncedSetFilter(keyword);\n  };\n\n  const handleCategoryChange = event => {\n    setSelectedCategory(event.target.value);\n    dispatch(setCategory(event.target.value));\n  };\n\n  useEffect(() => {\n    return () => {\n      debouncedSetFilter.cancel();\n    };\n  }, [debouncedSetFilter]);\n\n  return (\n    <Container>\n      <Input\n        placeholder=\"Find the word\"\n        value={keyword}\n        onChange={handleKeywordChange}\n      />\n      <Select id=\"categories\" name=\"categories\" onChange={handleCategoryChange}>\n        <option value=\"\"></option>\n        {categories &&\n          categories.map(category => (\n            <option key={category} value={category}>\n              {category}\n            </option>\n          ))}\n      </Select>\n      {selectedCategory === 'verb' && (\n        <RadioContainer>\n          <Radio type=\"radio\" name=\"verb\" id=\"regular\" value=\"false\" />\n          <Label htmlFor=\"regular\">Regular</Label>\n          <Radio type=\"radio\" name=\"verb\" id=\"irregular\" value=\"true\" />\n          <Label htmlFor=\"irregular\">Irregular</Label>\n        </RadioContainer>\n      )}\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Stat = styled.p`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 150%;\n  color: rgba(18, 20, 23, 0.5);\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const Span = styled.span`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 150%;\n  color: ${p => p.theme.colors.black};\n`;\n","import { Span, Stat } from './Statistics.styled';\nimport { useSelector } from 'react-redux';\nimport { selectTasks } from '../../redux/words/selectors';\n\nexport const Statistics = () => {\n  const words = useSelector(selectTasks);\n  return (\n    <>\n      <Stat>\n        To study:<Span>{words.length || 0}</Span>\n      </Stat>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  gap: 2px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 150%;\n  border: none;\n  color: ${p => p.theme.colors.black};\n  // background-color: ${p => p.theme.colors.buttonWhite};\n  background-color: transparent;\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.colors.green};\n  }\n`;\n\nexport const Link = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  gap: 2px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 150%;\n  color: ${p => p.theme.colors.black};\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.colors.green};\n  }\n`;\nexport const Svg = styled.svg`\n  width: 20px;\n  height: 20px;\n`;\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n`;\n","import { Link, Button, Svg, Container } from './AddWord.styled';\nimport { ModalAddWord } from '../../components/Modal/ModalAddWord';\nimport { useState } from 'react';\nimport sprite from '../../assets/sprite.svg';\nexport const AddWord = ({ exam }) => {\n  const [isOpenModalLogin, setIsOpenModalLogin] = useState(false);\n  return (\n    <Container>\n      {exam && (\n        <Button\n          onClick={() => {\n            setIsOpenModalLogin(true);\n          }}\n        >\n          Add word\n          <Svg>\n            <use xlinkHref={sprite + '#icon-plus'}></use>\n          </Svg>\n        </Button>\n      )}\n      <Link to=\"/training\">\n        Train oneself\n        <Svg>\n          <use xlinkHref={sprite + '#icon-switch'}></use>\n        </Svg>\n      </Link>\n      <ModalAddWord\n        isOpenModalLogin={isOpenModalLogin}\n        setIsOpenModalLogin={setIsOpenModalLogin}\n      />\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: block;\n  @media screen and (min-width: 1440px) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 1240px;\n    margin-right: auto;\n    margin-left: auto;\n  }\n`;\nexport const ContainerStat = styled.div`\n  @media screen and (min-width: 768px) {\n    display: flex;\n    align-items: center;\n    gap: 16px;\n  }\n`;\n","import { Filters } from './Filters';\nimport { Statistics } from './Statistics';\nimport { AddWord } from './AddWord';\nimport { Container, ContainerStat } from './Dashboard.styled';\nexport const Dashboard = ({ exam }) => {\n  return (\n    <Container>\n      <Filters />\n      <ContainerStat>\n        <Statistics />\n        <AddWord exam={exam} />\n      </ContainerStat>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background-color: ${p => p.theme.colors.white};\n  border-radius: 15px;\n  margin-right: auto;\n  margin-left: auto;\n\n  padding: 14px;\n  width: 343px;\n  height: 563px;\n  margin-top: 32px;\n\n  @media screen and (min-width: 1440px) {\n    padding: 18px;\n    width: 1240px;\n    height: 640px;\n    margin-top: 37px;\n  }\n`;\nexport const Container = styled.div`\n  width: 343px;\n  @media screen and (min-width: 1440px) {\n    width: 1240px;\n    height: 540px;\n  }\n`;\n\nexport const Table = styled.table`\n  width: 303px;\n  height: 540px;\n\n  @media screen and (min-width: 1440px) {\n    width: 1240px;\n    height: 540px;\n    margin-right: auto;\n    margin-left: auto;\n    border-collapse: collapse;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 0 0 1px ${p => p.theme.colors.white};\n  }\n`;\nexport const Span = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Th = styled.th`\n  padding: 0px;\n  height: 54px;\n  font-weight: 500;\n  font-size: 16px;\n\n  @media screen and (min-width: 1440px) {\n    border-bottom: 1px solid #dbdbdb;\n    border-right: 1px solid #dbdbdb;\n    text-align: left;\n    padding: 0px 22px 0px 22px;\n    height: 72px;\n    background-color: rgba(133, 170, 159, 0.1);\n    font-weight: 500;\n    font-size: 20px;\n    color: ${p => p.theme.colors.black};\n  }\n`;\n\nexport const Tr = styled.tr`\n  height: 70px;\n\n  &:last-child td {\n    border-bottom: none;\n  }\n  background-color: #fcfcfc;\n  @media screen and (min-width: 1440px) {\n    height: 80px;\n  }\n`;\n\nexport const Td = styled.td`\nfont-weight: 500;\nfont-size: 14px;\ncolor: ${p => p.theme.colors.black};\n\n&.category-exam {\n  display: none;\n}\nborder-bottom: 1px solid #dbdbdb;\n  border-right: 1px solid #dbdbdb;\n  padding: 0px;\n\n  &:last-child {\n    border-right: none; /* Прибираємо правий бордер у останньої комірки в рядку */\n  }\n\n  @media screen and (min-width: 768px) {\n    &.category-exam {\n      display: table-cell;\n    }\n\n  @media screen and (min-width: 1440px) {\n    font-weight: 500;\nfont-size: 20px;\npadding:  15px 22px 15px 22px;\n  }\n`;\nexport const Button = styled.button`\n  border: none;\n  background-color: transparent;\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.colors.green};\n  }\n`;\n\nexport const Svg = styled.svg`\n  display: none;\n  width: 32px;\n  height: 32px;\n  @media screen and (min-width: 768px) {\n    display: block;\n  }\n`;\nexport const Hidden = styled.span`\n  display: none;\n`;\nexport const SvgAdd = styled.svg`\n  width: 20px;\n  height: 20px;\n`;\n\nexport const SpanAdd = styled.span`\n  font-weight: 500;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\nexport const ButtonAdd = styled.button`\n  font-weight: 500;\n  font-size: 20px;\n  color: ${p => p.theme.colors.black};\n  border: none;\n  background-color: transparent;\n  display: block;\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.colors.green};\n  }\n`;\n","import { Circle } from 'rc-progress';\n\n\nconst CircularProgress = ({ progress }) => {\n    const containerStyle = {\n      display: 'flex',\n      alignItems: 'center',\n    };\n  \n    const circleContainerStyle = {\n      display: 'inline-block',\n      width: 50,\n      height: 50,\n      marginLeft: '16px',\n    };\n  \n    const progressTextStyle = {\n      fontSize: '22px',\n      fontWeight: '500',\n      display: 'none',\n    };\n\n    const responsiveProgressTextStyle = {\n      ...progressTextStyle,\n      '@media (min-width: 768px)': {\n        display: 'block', // Показуємо текст при ширині екрана 768 пікселів і більше\n      },\n    };\n  \n  \n    return (\n      <div style={containerStyle}>\n        <div style={responsiveProgressTextStyle}>{`${progress}%`}</div>\n        <div style={circleContainerStyle}>\n        <Circle \n          percent={progress}\n          size={58}\n          strokeWidth={5} \n          // strokeWidth={10} \n          strokeColor=\"green\" \n          trailColor=\"#2BD627\" \n     />\n        </div>\n      </div>\n    );\n  };\n\n\n\n\n\nexport default CircularProgress;\n  \n  ","import styled from 'styled-components';\n\nexport const Wrapper = styled.nav`\n  margin-top: 28px;\n  margin-bottom: 50px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  width: 32px;\n  height: 32px;\n  border-radius: 8px;\n  background-color: transparent;\n\n  color: var(--primary-color-black);\n  border: 1px solid var(--primary-color-fon);\n  &:hoveer,\n  &:focus {\n    background-color: ${p => p.theme.colors.green};\n    color: ${p => p.theme.colors.white};\n  }\n`;\n\nexport const Activ = styled.button`\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 13px;\n  width: 32px;\n  height: 32px;\n  border-radius: 8px;\n  background-color: ${({ active }) => (active ? '#85AA9F' : '#fff')};\n  color: ${({ active }) => (active ? '#fff' : '#121417')};\n  border: 1px solid #121417;\n  &:hover {\n    background-color: ${({ active }) => (active ? '#0056b3' : '#e7e7e7')};\n  }\n`;\n","import React from 'react';\nimport { Wrapper, List, Button, Activ } from './Pagination.styled';\n\nconst Pagination = ({ totalPages, page, onPageChange }) => {\n  // const handlePageChange = (page) => {\n  //   onPageChange(page);\n  // };\n\n  const handlePageChange = newPage => {\n    if (newPage !== page) {\n      onPageChange(newPage);\n    }\n  };\n\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n\n    const renderDots = key => (\n      <li key={key} className=\"dots\">\n        ...\n      </li>\n    );\n\n    if (totalPages <= 7) {\n      for (let i = 1; i <= totalPages; i++) {\n        pageNumbers.push(\n          <li key={i} className={page === i ? 'active' : ''}>\n            <Activ active={page === i} onClick={() => handlePageChange(i)}>\n              {i}\n            </Activ>\n          </li>\n        );\n      }\n    } else {\n      let s = 1;\n      let e = 3;\n      if (page > 1) {\n        s = page - 1;\n        e = page + 1;\n      }\n      if (page > totalPages - 3) {\n        s = totalPages - 3;\n        e = totalPages - 1;\n      }\n\n      for (let i = s; i <= e; i++) {\n        pageNumbers.push(\n          <li key={i} className={page === i ? 'active' : ''}>\n            <Activ active={page === i} onClick={() => handlePageChange(i)}>\n              {i}\n            </Activ>\n          </li>\n        );\n      }\n\n      pageNumbers.push(renderDots('dots1'));\n\n      for (let i = totalPages; i <= totalPages; i++) {\n        pageNumbers.push(\n          <li key={i}>\n            <Activ active={page === i} onClick={() => handlePageChange(i)}>\n              {i}\n            </Activ>\n          </li>\n        );\n      }\n    }\n\n    return pageNumbers;\n  };\n\n  return (\n    <Wrapper>\n      <List>\n        <li>\n          <Button disabled={page === 1} onClick={() => handlePageChange(1)}>\n            {'<<'}\n          </Button>\n        </li>\n        {page !== 1 && (\n          <li>\n            <Button onClick={() => handlePageChange(page - 1)}>{'<'}</Button>\n          </li>\n        )}\n        {renderPageNumbers()}\n        {page !== totalPages && (\n          <li>\n            <Button onClick={() => handlePageChange(page + 1)}>{'>'}</Button>\n          </li>\n        )}\n        <li>\n          <Button\n            disabled={page === totalPages}\n            onClick={() => handlePageChange(totalPages)}\n          >\n            {'>>'}\n          </Button>\n        </li>\n      </List>\n    </Wrapper>\n  );\n};\n\nexport default Pagination;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Edit = styled.button`\ndisplay: flex;\nwidth: 76px;\nheight: 24px;\nfont-weight: 500;\nfont-size: 16px;\nline-height: 150%;\nborder: none;\nbackground-color: transparent;\n&:hover, &:focus {\n    color: ${p => p.theme.colors.green};\n    \n\n`;\n\nexport const Delet = styled.button`\ndisplay: flex;\nalign-items: center;\nwidth: 76px;\nheight: 24px;\nfont-weight: 500;\nfont-size: 16px;\nline-height: 150%;\nborder: none;\nbackground-color: transparent;\n&:hover, &:focus {\n    color: ${p => p.theme.colors.green};\n    \n`;\n\nexport const Svg = styled.svg`\n  width: 16px;\n  height: 16px;\n  margin-right: 4px;\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.form`\n  color: ${p => p.theme.colors.white};\n  position: relative;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 600;\n  font-size: 40px;\n  line-height: 120%;\n  letter-spacing: -0.02em;\n  margin-bottom: 20px;\n`;\n\nexport const Text = styled.p`\n  ont-weight: 400;\n  font-size: 20px;\n  line-height: 150%;\n  color: rgba(252, 252, 252, 0.8);\n  margin-bottom: 32px;\n`;\nexport const Select = styled.select`\n  box-sizing: border-box;\n  display: flex;\n  border: 1px solid rgba(252, 252, 252, 0.3);\n  border-radius: 15px;\n  padding: 12px 24px;\n  width: 204px;\n  height: 48px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 150%;\n  background-color: ${p => p.theme.colors.green};\n  color: ${p => p.theme.colors.white};\n`;\nexport const Input = styled.input`\n  display: flex;\n  box-sizing: border-box;\n  border: 1px solid rgba(252, 252, 252, 0.3);\n  border-radius: 15px;\n  padding: 16px 246px 16px 18px;\n  width: 354px;\n  height: 56px;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 150%;\n  background-color: ${p => p.theme.colors.green};\n  color: ${p => p.theme.colors.white};\n`;\nexport const Lang = styled.p`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 150%;\n`;\nexport const AddButton = styled.button`\n  border-radius: 30px;\n  padding: 14px 104px;\n  width: 245px;\n  height: 56px;\n  border: none;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 156%;\n  background-color: ${p => p.theme.colors.white};\n  color: ${p => p.theme.colors.black};\n  margin-right: 10px;\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.colors.green};\n  }\n`;\nexport const CancelButton = styled.button`\n  border: 1px solid rgba(252, 252, 252, 0.4);\n  border-radius: 30px;\n  padding: 14px 92px;\n  width: 245px;\n  height: 56px;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 156%;\n  background-color: ${p => p.theme.colors.green};\n  color: ${p => p.theme.colors.white};\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.colors.black};\n    background-color: ${p => p.theme.colors.white};\n  }\n`;\nexport const ButtonClose = styled.button`\n  margin-left: auto;\n  background-color: #85aa9f;\n  display: block;\n  border: none;\n  position: absolute;\n  right: -50px;\n  top: -50px;\n`;\n\nexport const Close = styled.svg`\n  width: 32px;\n  height: 32px;\n`;\n\nexport const Radio = styled.input``;\nexport const RadioContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-bottom: 22px;\n  margin-top: 8px;\n`;\nexport const Label = styled.label`\n  font-weight: 400;\n  font-size: 16px;\n  text-align: center;\n  color: ${p => p.theme.colors.white};\n`;\n\nexport const SvgLang = styled.svg`\n  width: 32px;\n  height: 32px;\n`;\n\nexport const ContainerLang = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-left: 32px;\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  margin-top: 16px;\n`;\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-top: 32px;\n`;\n\nexport const RadioText = styled.p`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 117%;\n  color: ${p => p.theme.colors.white};\n`;\n\nexport const ErrorMessage = styled.p`\n  color: red;\n  font-size: 14px;\n  margin-top: 5px;\n`;\n","import Modal from 'react-modal';\n\nimport sprite from '../../assets/sprite.svg';\nimport { useSelector } from 'react-redux';\nimport { selectToken } from '../../redux/auth/selectors';\n\nimport { useDispatch } from 'react-redux';\nimport { editWord } from '../../redux/words/operation';\nimport { useState } from 'react';\nimport * as yup from 'yup';\nimport {\n  Wrapper,\n  ButtonClose,\n  Close,\n  InputContainer,\n  Input,\n  ContainerLang,\n  Lang,\n  SvgLang,\n  ButtonContainer,\n  AddButton,\n  CancelButton,\n  ErrorMessage,\n} from './EditWordForm.styled';\n\nModal.setAppElement('#modal');\n\nconst schema = yup\n  .object({\n    eng: yup\n      .string()\n      .matches(/\\b[A-Za-z'-]+(?:\\s+[A-Za-z'-]+)*\\b/, 'Text is not valid')\n      .required('Is required'),\n    ukr: yup\n      .string()\n      .matches(/^(?![A-Za-z])[А-ЯІЄЇҐґа-яієїʼ\\s]+$/u, 'Text is not valid')\n      .required('Is required'),\n  })\n  .required();\n\nexport const EditWordForm = ({ isOpenModal, setIsOpenModal, wordData }) => {\n  const customStyles = {\n    overlay: {\n      backgroundColor: 'rgba(18, 20, 23, 0.2)',\n    },\n    content: {\n      boxSizing: 'border-box',\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n      padding: '48px 64px 48px 64px',\n      paddingLeft: '64px',\n      width: '627px',\n      height: '345px',\n      borderRadius: '30px',\n      backgroundColor: '#85AA9F',\n    },\n  };\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // const handleEditClick = () => {\n  //   setIsOpenModal(true);\n  // };\n  const token = useSelector(selectToken);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async event => {\n    try {\n      event.preventDefault();\n      const en = event.target.elements.eng.value;\n      const ua = event.target.elements.ukr.value;\n      const category = wordData.category;\n      const isIrregular = wordData.isIrregular;\n      const id = wordData._id;\n      await schema.validate({ eng: en, ukr: ua });\n\n      dispatch(editWord({ id, en, ua, category, isIrregular, token }));\n      event.target.reset();\n      setIsOpenModal(false);\n      setErrorMessage('');\n    } catch (error) {\n      setErrorMessage(error.message);\n      // toast.error(error.message);\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        isOpen={isOpenModal}\n        onRequestClose={() => {\n          setIsOpenModal(false);\n        }}\n        style={customStyles}\n        contentLabel=\"More info modal\"\n      >\n        <Wrapper onSubmit={handleSubmit}>\n          <ButtonClose onClick={() => setIsOpenModal(false)}>\n            <Close>\n              <use xlinkHref={sprite + '#icon-close'}></use>\n            </Close>\n          </ButtonClose>\n\n          <InputContainer>\n            <Input name=\"ukr\"></Input>\n\n            <ContainerLang>\n              <SvgLang>\n                <use xlinkHref={sprite + '#icon-ukraine'}></use>\n              </SvgLang>\n              <Lang>Ukrainian</Lang>\n            </ContainerLang>\n          </InputContainer>\n          <InputContainer>\n            <Input name=\"eng\"></Input>\n\n            <ContainerLang>\n              <SvgLang>\n                <use xlinkHref={sprite + '#icon-uk'}></use>\n              </SvgLang>\n              <Lang>English</Lang>\n            </ContainerLang>\n          </InputContainer>\n          {/* <ErrorMessage>Write on language that set on input</ErrorMessage> */}\n          {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n          <ButtonContainer>\n            <AddButton type=\"submit\">Save</AddButton>\n            <CancelButton type=\"button\" onClick={() => setIsOpenModal(false)}>\n              Cancel\n            </CancelButton>\n          </ButtonContainer>\n        </Wrapper>\n      </Modal>\n    </>\n  );\n};\n","import Modal from 'react-modal';\nimport { Edit, Delet, Wrapper, Svg } from './EditwordModal.styled';\n\nimport sprite from '../../assets/sprite.svg';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectToken } from '../../redux/auth/selectors';\nimport { useState } from 'react';\nimport { EditWordForm } from './EditWordForm';\nimport { deleteWordById } from '../../redux/words/operation';\n\nModal.setAppElement('#modal');\n\nexport const EditWordModal = ({ isOpenModal, setIsOpenModal, wordData }) => {\n  const [isOpenEditModal, setIsOpenEditModal] = useState(false);\n  const customStyles = {\n    overlay: {\n      backgroundColor: 'transparent',\n      width: '1600px',\n    },\n    content: {\n      boxSizing: 'border-box',\n      top: '45%',\n      left: '85%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n      padding: '12px 0px 12px 0px',\n      width: '130px',\n      height: '80px',\n      borderRadius: '15px',\n      backgroundColor: '#FFF',\n      boxShadow: '0 4px 47px 0 rgba(18, 20, 23, 0.08)',\n      border: 'none',\n    },\n  };\n\n  const handleEditClick = () => {\n    setIsOpenEditModal(true);\n  };\n\n  const token = useSelector(selectToken);\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    const id = wordData._id;\n\n    dispatch(deleteWordById({ id, token }));\n    setIsOpenModal(false);\n  };\n\n  return (\n    <>\n      <Modal\n        isOpen={isOpenModal}\n        onRequestClose={() => {\n          setIsOpenModal(false);\n        }}\n        style={customStyles}\n        contentLabel=\"More info modal\"\n      >\n        <Wrapper onSubmit={handleDelete}>\n          <Edit onClick={handleEditClick} type=\"button\">\n            <Svg>\n              <use xlinkHref={sprite + '#icon-pen'}></use>\n            </Svg>\n            Edit\n          </Edit>\n          <Delet type=\"submit\">\n            <Svg>\n              <use xlinkHref={sprite + '#icon-trash'}></use>\n            </Svg>\n            Delete\n          </Delet>\n        </Wrapper>\n      </Modal>\n      <EditWordForm\n        isOpenModal={isOpenEditModal}\n        setIsOpenModal={setIsOpenEditModal}\n        wordData={wordData}\n      />\n    </>\n  );\n};\n","import { ColorRing } from \"react-loader-spinner\";\nexport const Loader = () =>(\n<ColorRing\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"blocks-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"blocks-wrapper\"\n  colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n/>)","// import {\n//   createColumnHelper,\n//   flexRender,\n//   getCoreRowModel,\n//   useReactTable,\n// } from '@tanstack/react-table';\n// import * as React from 'react';\n// import { Wrapper, Th, Tr, Td, Button, Table, Svg, Span, Hidden } from './DictionaryTable.styled';\n// import sprite from '../../assets/sprite.svg'\n\n// import Pagination from '../Pagination/Pagination';\n\n// import { fetchWords } from '../../redux/words/operation';\n// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { selectWords, selectCurrentPage, selectTotalPage, selectFiltersKeyWord, selectFiltersCategory } from '../../redux/words/selectors';\n// import { useSelector } from 'react-redux';\n// import { selectToken } from '../../redux/auth/selectors';\n// import { EditWordModal } from '../../components/Modal/EditWordModal';\n// import { useState } from 'react';\n\n// export function DictionaryTable({exam}) {\n//   const [isOpenModal, setIsOpenModal] = useState(false);\n//   const [selectedRowData, setSelectedRowData] = useState(null);\n\n//   const handleStatusClick = (rowData) => {\n//     setSelectedRowData(rowData);\n//     setIsOpenModal(true);\n//   };\n\n//   const words = useSelector(selectWords);\n//   const token = useSelector(selectToken);\n//   const totalPages = useSelector(selectTotalPage);\n//   const currentPage = useSelector(selectCurrentPage);\n//   const keyword = useSelector(selectFiltersKeyWord);\n//   const category = useSelector(selectFiltersCategory);\n//   const dispatch = useDispatch();\n//   useEffect(() => {\n//     dispatch(fetchWords({ token, page: currentPage, keyword, category }));\n//   }, [dispatch, token, currentPage, keyword, category]);\n\n//   const columnHelper = createColumnHelper();\n\n//   // const columns = [\n//   //   columnHelper.accessor('en', {\n//   //     cell: info => info.getValue(),\n//   //     header: () => <Span>Word<Svg><use xlinkHref={sprite + '#icon-uk'}></use></Svg></Span>,\n//   //   }),\n//   //   columnHelper.accessor('ua', {\n//   //     cell: info => info.getValue(),\n//   //     header: () => <Span>Translation<Svg><use xlinkHref={sprite + '#icon-ukraine'}></use></Svg></Span>,\n//   //   }),\n//   //   columnHelper.accessor('category', {\n//   //     header: () => 'Category',\n//   //     cell: info => info.getValue(),\n//   //   }),\n//   //   columnHelper.accessor('progress', {\n//   //     header: () => <span>Progress</span>,\n//   //   }),\n//   //   columnHelper.accessor('status', {\n//   //     header: () => <Hidden>Status</Hidden>,\n//   //     cell: info => (\n//   //       <Button onClick={() => handleStatusClick(info.row.original)}>\n//   //         {info.getValue() || '...'}\n//   //       </Button>\n//   //     ),\n//   //   }),\n//   // ];\n// let columns;\n// if(exam === true) {\n//    columns = [\n//     columnHelper.accessor('en', {\n//       cell: info => info.getValue(),\n//       header: () => <Span>Word<Svg><use xlinkHref={sprite + '#icon-uk'}></use></Svg></Span>,\n//     }),\n//     columnHelper.accessor('ua', {\n//       cell: info => info.getValue(),\n//       header: () => <Span>Translation<Svg><use xlinkHref={sprite + '#icon-ukraine'}></use></Svg></Span>,\n//     }),\n//     columnHelper.accessor('category', {\n//       header: () => 'Category',\n//       cell: info => info.getValue(),\n//     }),\n//     columnHelper.accessor('progress', {\n//       header: () => <span>Progress</span>,\n//     }),\n//     columnHelper.accessor('status', {\n//       header: () => <Hidden>Status</Hidden>,\n//       cell: info => (\n//         <Button onClick={() => handleStatusClick(info.row.original)}>\n//           {info.getValue() || '...'}\n//         </Button>\n//       ),\n//     }),];}\n//     else{ columns = [\n//       columnHelper.accessor('en', {\n//         cell: info => info.getValue(),\n//         header: () => <Span>Word<Svg><use xlinkHref={sprite + '#icon-uk'}></use></Svg></Span>,\n//       }),\n//       columnHelper.accessor('ua', {\n//         cell: info => info.getValue(),\n//         header: () => <Span>Translation<Svg><use xlinkHref={sprite + '#icon-ukraine'}></use></Svg></Span>,\n//       }),\n//       columnHelper.accessor('category', {\n//         header: () => 'Category',\n//         cell: info => info.getValue(),\n//       }),\n\n//       columnHelper.accessor('status', {\n//         header: () => <Hidden>Status</Hidden>,\n//         cell: info => (\n//           <Button onClick={() => handleStatusClick(info.row.original)}>\n//             {info.getValue() || 'Add to dictionary'}\n//           </Button>\n//         ),\n//       }),]}\n\n//   const table = useReactTable({\n//     data: words,\n//     columns,\n//     getCoreRowModel: getCoreRowModel(),\n//   });\n\n//   const handlePageChange = (newPage) => {\n//     dispatch(fetchWords({ token, page: newPage }));\n//   };\n\n//   return (\n//     <>\n//     <Wrapper>\n//       <Table>\n//         <thead>\n//           {table.getHeaderGroups().map(headerGroup => (\n//             <tr key={headerGroup.id}>\n//               {headerGroup.headers.map(header => (\n//                 <Th key={header.id}>\n//                   {header.isPlaceholder\n//                     ? null\n//                     : flexRender(\n//                         header.column.columnDef.header,\n//                         header.getContext()\n//                       )}\n//                 </Th>\n//               ))}\n//             </tr>\n//           ))}\n//         </thead>\n//         <tbody>\n//           {table.getRowModel().rows.map(row => (\n//             <Tr key={row.id}>\n//               {row.getVisibleCells().map(cell => (\n//                 <Td key={cell.id}>\n//                   {flexRender(cell.column.columnDef.cell, cell.getContext())}\n//                 </Td>\n//               ))}\n//             </Tr>\n//           ))}\n//         </tbody>\n//       </Table>\n//       <EditWordModal\n//      isOpenModal={isOpenModal}\n//      setIsOpenModal={setIsOpenModal}\n//      wordData={selectedRowData}\n//    />\n//     </Wrapper>\n\n//    <Pagination totalPages={totalPages}\n//         page={currentPage}\n//         onPageChange={handlePageChange}/>\n//         </>\n\n//   );\n// }\n\nimport {\n  createColumnHelper,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport * as React from 'react';\nimport {\n  Wrapper,\n  Th,\n  Tr,\n  Td,\n  Button,\n  Table,\n  Svg,\n  Span,\n  Hidden,\n  SvgAdd,\n  SpanAdd,\n  ButtonAdd,\n} from './DictionaryTable.styled';\nimport sprite from '../../assets/sprite.svg';\nimport CircularProgress from '../Progress';\n\nimport Pagination from '../Pagination/Pagination';\n\nimport {\n  fetchWords,\n  fetchWordsRecommend,\n  addRecommendWord,\n} from '../../redux/words/operation';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  selectWords,\n  selectCurrentPage,\n  selectTotalPage,\n  selectFiltersKeyWord,\n  selectFiltersCategory,\n  selectWordsRecommend,\n  selectIsLoading,\n} from '../../redux/words/selectors';\nimport { useSelector } from 'react-redux';\nimport { selectToken } from '../../redux/auth/selectors';\nimport { EditWordModal } from '../../components/Modal/EditWordModal';\nimport { useState } from 'react';\nimport { Loader } from '../../components/Loader';\n\nexport function DictionaryTable({ exam }) {\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [selectedRowData, setSelectedRowData] = useState(null);\n\n  const handleStatusClick = rowData => {\n    setSelectedRowData(rowData);\n    setIsOpenModal(true);\n  };\n\n  const words = useSelector(selectWords);\n  const recommend = useSelector(selectWordsRecommend);\n  const token = useSelector(selectToken);\n  const totalPages = useSelector(selectTotalPage);\n  const currentPage = useSelector(selectCurrentPage);\n  const keyword = useSelector(selectFiltersKeyWord);\n  const category = useSelector(selectFiltersCategory);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleAddRecommend = id => {\n    dispatch(addRecommendWord({ id, token }));\n  };\n\n  // useEffect(() => {\n  //   dispatch(fetchWords({ token, page: currentPage, keyword, category }));\n  // }, [dispatch, token, currentPage, keyword, category]);\n\n  // useEffect(() => {\n  //   dispatch(fetchWordsRecommend({ token, page: currentPage, keyword, category }));\n  // }, [dispatch, token, currentPage, keyword, category]);\n\n  useEffect(() => {\n    if (exam) {\n      dispatch(fetchWords({ token, page: currentPage, keyword, category }));\n    } else {\n      dispatch(\n        fetchWordsRecommend({ token, page: currentPage, keyword, category })\n      );\n    }\n  }, [dispatch, token, currentPage, keyword, category, exam]);\n\n  const columnHelper = createColumnHelper();\n\n  // const columns = [\n  //   columnHelper.accessor('en', {\n  //     cell: info => info.getValue(),\n  //     header: () => <Span>Word<Svg><use xlinkHref={sprite + '#icon-uk'}></use></Svg></Span>,\n  //   }),\n  //   columnHelper.accessor('ua', {\n  //     cell: info => info.getValue(),\n  //     header: () => <Span>Translation<Svg><use xlinkHref={sprite + '#icon-ukraine'}></use></Svg></Span>,\n  //   }),\n  //   columnHelper.accessor('category', {\n  //     header: () => 'Category',\n  //     cell: info => info.getValue(),\n  //   }),\n  //   columnHelper.accessor('progress', {\n  //     header: () => <span>Progress</span>,\n  //   }),\n  //   columnHelper.accessor('status', {\n  //     header: () => <Hidden>Status</Hidden>,\n  //     cell: info => (\n  //       <Button onClick={() => handleStatusClick(info.row.original)}>\n  //         {info.getValue() || '...'}\n  //       </Button>\n  //     ),\n  //   }),\n  // ];\n  let columns;\n  if (exam === true) {\n    columns = [\n      columnHelper.accessor('en', {\n        cell: info => info.getValue(),\n        header: () => (\n          <Span>\n            Word\n            <Svg>\n              <use xlinkHref={sprite + '#icon-uk'}></use>\n            </Svg>\n          </Span>\n        ),\n      }),\n      columnHelper.accessor('ua', {\n        cell: info => info.getValue(),\n        header: () => (\n          <Span>\n            Translation\n            <Svg>\n              <use xlinkHref={sprite + '#icon-ukraine'}></use>\n            </Svg>\n          </Span>\n        ),\n      }),\n      columnHelper.accessor('category', {\n        header: () => <span className=\"category-exam\">Category</span>,\n        cell: info => <span className=\"category-exam\">{info.getValue()}</span>,\n      }),\n      columnHelper.accessor('progress', {\n        header: () => <span>Progress</span>,\n        cell: info => <CircularProgress progress={info.getValue()} />,\n      }),\n      columnHelper.accessor('status', {\n        header: () => <Hidden>Status</Hidden>,\n        cell: info => (\n          <Button onClick={() => handleStatusClick(info.row.original)}>\n            {info.getValue() || '...'}\n          </Button>\n        ),\n      }),\n    ];\n  } else {\n    columns = [\n      columnHelper.accessor('en', {\n        cell: info => info.getValue(),\n        header: () => (\n          <Span>\n            Word\n            <Svg>\n              <use xlinkHref={sprite + '#icon-uk'}></use>\n            </Svg>\n          </Span>\n        ),\n      }),\n      columnHelper.accessor('ua', {\n        cell: info => info.getValue(),\n        header: () => (\n          <Span>\n            Translation\n            <Svg>\n              <use xlinkHref={sprite + '#icon-ukraine'}></use>\n            </Svg>\n          </Span>\n        ),\n      }),\n      columnHelper.accessor('category', {\n        header: () => 'Category',\n        cell: info => <span>{info.getValue()}</span>,\n      }),\n\n      columnHelper.accessor('status', {\n        header: () => <Hidden>Status</Hidden>,\n        cell: info => (\n          <ButtonAdd onClick={() => handleAddRecommend(info.row.original._id)}>\n            {info.getValue() || (\n              <SpanAdd>\n                Add to dictionary\n                <SvgAdd>\n                  <use xlinkHref={sprite + '#icon-switch'}></use>\n                </SvgAdd>\n              </SpanAdd>\n            )}\n          </ButtonAdd>\n        ),\n      }),\n    ];\n  }\n\n  let value;\n  if (exam) {\n    value = words;\n  } else {\n    value = recommend;\n  }\n\n  const table = useReactTable({\n    data: value,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const handlePageChange = newPage => {\n    if (exam) {\n      dispatch(fetchWords({ token, page: newPage }));\n    } else {\n      dispatch(fetchWordsRecommend({ token, page: newPage }));\n    }\n  };\n\n  return (\n    <>\n      <Wrapper>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map(headerGroup => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map(header => (\n                    <Th key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </Th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {table.getRowModel().rows.map(row => (\n                <Tr key={row.id}>\n                  {row.getVisibleCells().map(cell => (\n                    // <Td key={cell.id}>\n                    //   {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    // </Td>\n                    <Td\n                      key={cell.id}\n                      className={\n                        exam && cell.column.id === 'category'\n                          ? 'category-exam'\n                          : ''\n                      }\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </Td>\n                  ))}\n                </Tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n        <EditWordModal\n          isOpenModal={isOpenModal}\n          setIsOpenModal={setIsOpenModal}\n          wordData={selectedRowData}\n        />\n      </Wrapper>\n\n      <Pagination\n        totalPages={totalPages}\n        page={currentPage}\n        onPageChange={handlePageChange}\n      />\n    </>\n  );\n}\n"],"names":["Input","styled","_templateObject","_taggedTemplateLiteral","p","theme","colors","black","Select","_templateObject2","Container","_templateObject3","Radio","_templateObject4","RadioContainer","_templateObject5","Label","_templateObject6","Filters","token","useSelector","selectToken","dispatch","useDispatch","useEffect","fetchCategories","categories","selectCategories","_useState","useState","_useState2","_slicedToArray","selectedCategory","setSelectedCategory","_useState3","_useState4","keyword","setKeyword","debouncedSetFilter","useMemo","debounce","setFilter","cancel","_jsxs","children","_jsx","placeholder","value","onChange","event","target","trim","id","name","setCategory","map","category","type","htmlFor","Stat","Span","Statistics","words","selectTasks","_Fragment","length","Button","buttonWhite","green","Link","NavLink","Svg","AddWord","_ref","exam","isOpenModalLogin","setIsOpenModalLogin","onClick","xlinkHref","sprite","to","ModalAddWord","ContainerStat","Dashboard","Wrapper","white","Table","Th","Tr","Td","_templateObject7","_templateObject8","_templateObject9","Hidden","_templateObject10","SvgAdd","_templateObject11","SpanAdd","_templateObject12","ButtonAdd","_templateObject13","progress","responsiveProgressTextStyle","_objectSpread","fontSize","fontWeight","display","style","alignItems","concat","width","height","marginLeft","Circle","percent","size","strokeWidth","strokeColor","trailColor","List","Activ","active","_ref2","_ref3","totalPages","page","onPageChange","handlePageChange","newPage","disabled","key","pageNumbers","_loop","i","push","className","s","e","_loop2","_loop3","renderPageNumbers","Edit","Delet","Lang","AddButton","CancelButton","ButtonClose","Close","SvgLang","_templateObject14","ContainerLang","_templateObject15","InputContainer","_templateObject16","ButtonContainer","_templateObject17","ErrorMessage","_templateObject18","_templateObject19","Modal","schema","yup","eng","matches","required","ukr","EditWordForm","isOpenModal","setIsOpenModal","wordData","errorMessage","setErrorMessage","handleSubmit","_asyncToGenerator","_regeneratorRuntime","_callee","en","ua","isIrregular","_context","prev","next","preventDefault","elements","_id","validate","editWord","reset","t0","message","stop","_x","apply","arguments","isOpen","onRequestClose","overlay","backgroundColor","content","boxSizing","top","left","right","bottom","marginRight","transform","padding","paddingLeft","borderRadius","contentLabel","onSubmit","EditWordModal","isOpenEditModal","setIsOpenEditModal","boxShadow","border","deleteWordById","Loader","ColorRing","visible","ariaLabel","wrapperStyle","wrapperClass","DictionaryTable","selectedRowData","setSelectedRowData","selectWords","recommend","selectWordsRecommend","selectTotalPage","currentPage","selectCurrentPage","selectFiltersKeyWord","selectFiltersCategory","isLoading","selectIsLoading","fetchWords","fetchWordsRecommend","columns","columnHelper","createColumnHelper","accessor","cell","info","getValue","header","CircularProgress","rowData","row","original","addRecommendWord","table","useReactTable","data","getCoreRowModel","getHeaderGroups","headerGroup","headers","isPlaceholder","flexRender","column","columnDef","getContext","getRowModel","rows","getVisibleCells","Pagination"],"sourceRoot":""}